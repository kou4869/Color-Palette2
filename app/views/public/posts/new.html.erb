<div class="posts-new pt-3">
  <div class="container">
    <h2 class="font_kaushan"><strong>【 新規配色投稿 】</strong></h2>

    <% if flash[:error] %>
      <!--エラーが起こるとnewページへ遷移するが、URLが『/posts』になってしまうのでjavascriptを使用して9行目でURLを『/new』に変更する命令を出している-->
      <script type="text/javascript">
        $(document).ready(function() {
          history.pushState('', '', location.href + '/new')
        });
      </script>

      <div class="alert alert-danger">
        <% @post.errors.full_messages.each do |message| %>
          <li>
            <%= message %>
          </li>
        <% end %>
      </div>
    <% else %>
      <!--何も表示しない-->
    <% end %>

    <div class="row pt-3 pb-5">
      <div class="col-12 col-md-5 offset-0 offset-md-1 pb-5">

        <!--ひし形に設定のため1→2→4→3の順にidを付属-->
        <div class="big_diamond ">
          <div class="square" id="color1">
            <div class="text_box">
              <p class="text-color">color 1</p>
            </div>
          </div>
          <div class="square" id="color2">
            <div class="text_box">
              <p class="text-color">color 2</p>
            </div>
          </div>
          <div class="square" id="color4">
            <div class="text_box">
              <p class="text-color">color 4</p>
            </div>
          </div>
          <div class="square" id="color3">
            <div class="text_box">
              <p class="text-color">color 3</p>
            </div>
          </div>
        </div>
      </div>

      <div class="col-12 col-md-6">
        <p class="form_text text-center">
          下記の『Colorバー』を押下いただきますと色が選択できます。<br>
          選択された色は左記のひし形に反映され、<br>
          配色のバランスを確認することが可能です。
        </p>

        <%= form_with model: @post do |f| %>
          <div class="row mt-2">
            <div class="col-12 col-md-4">

              <div class="form-group">
                <b><%= f.label :"color 1" %></b>
                <% if @post.color1.nil? %>
                  <%= f.color_field :color1, class: "form-control", id: "color_form1", value: "#ff4500" %>
                <% else %>
                  <%= f.color_field :color1, class: "form-control", id: "color_form1" %>
                <% end %>
              </div>
              <div class="form-group">
                <b><%= f.label :"color 2" %></b>
                <% if @post.color2.nil? %>
                  <%= f.color_field :color2, class: "form-control", id: "color_form2", value: "#ffd700" %>
                <% else %>
                  <%= f.color_field :color2, class: "form-control", id: "color_form2" %>
                <% end %>
              </div>
              <div class="form-group">
                <b><%= f.label :"color 3" %></b>
                <% if @post.color3.nil? %>
                  <%= f.color_field :color3, class: "form-control", id: "color_form3", value: "#2e8b57" %>
                <% else %>
                  <%= f.color_field :color3, class: "form-control", id: "color_form3" %>
                <% end %>
              </div>
              <div class="form-group">
                <b><%= f.label :"color 4" %></b>
                <% if @post.color4.nil? %>
                  <%= f.color_field :color4, class: "form-control", id: "color_form4", value: "#00bfff" %>
                <% else %>
                  <%= f.color_field :color4, class: "form-control", id: "color_form4" %>
                <% end %>
              </div>

            </div>

            <div class="col-12 col-md-8">
              <div class="form-group">
                <b><%= f.label :"配色の説明" %></b>
                <%= f.text_area :post_introduction, class: "form-control", rows: "5", placeholder: "配色のポイントや紹介などを300文字以内で入力ください" %>
              </div>

              <% if flash[:my_alert] %>
                <div class="alerts">
                  <div class="alert alert-danger" role="alert"><%= flash[:my_alert] %></div>
                </div>
              <% end %>

              <div class="check_box my-3">
                <p class="tag_check">
                  <span><b>【必須項目】</b></span><br>
                  以下のタグの中から１～４個までタグを選んでください
                </p>
                <div class="check_item">
                  <%= f.collection_check_boxes(:tag_ids, @tags, :id, :tag_name) do |tag| %>
                    <div class="form-check form-check-inline">
                      <%= tag.check_box(class: "form-check-input") %>
                      <%= tag.label(class: "form-check-label") { tag.text } %>
                    </div>
                  <% end %>
                </div>
                
              </div>

              <div class="post_btn text-right pt-2">
                <%= f.submit "新規投稿", class: 'btn btn-primary' %>
              </div>
              
            </div>

          </div>
        <% end %>
        <div class="new-tag">
          <%= render 'public/tags/new', tag: @tag %>
        </div>
        

      </div>
    </div>

    <!--↓ トップに戻る用のid-->
    <a href="#" id="page_top"></a>

  </div>
</div>


<script>
  document.addEventListener("DOMContentLoaded", function() {
    //デフォルトで色を読み込んでおきたいので、"DOMContentLoaded"でHTMLを先に読み込んでいる状態を作っている

    let color1 = document.getElementById('color1')
    let color2 = document.getElementById('color2')
    let color3 = document.getElementById('color3')
    let color4 = document.getElementById('color4')
    //ひし形の各divのidを取得

    let colorForm1 = document.getElementById('color_form1')
    let colorForm2 = document.getElementById('color_form2')
    let colorForm3 = document.getElementById('color_form3')
    let colorForm4 = document.getElementById('color_form4')
    //カレーパレットの各idを取得

    const init = () => {  // initに始めにあてたい色を定義（init 初期設定などによく使用する単語)

        color1.style.backgroundColor = colorForm1.value;  //フォームの色を持ってくる
        color2.style.backgroundColor = colorForm2.value;
        color3.style.backgroundColor = colorForm3.value;
        color4.style.backgroundColor = colorForm4.value;
        colorForm1.addEventListener("input", applyColor1);  //各カラーパレットの色が選択された時、各applyColorアクションを実行
        colorForm2.addEventListener("input", applyColor2);  //string型で指定されているカラムに対しては"input(インプット)"を使うことが多い。
        colorForm3.addEventListener("input", applyColor3);
        colorForm4.addEventListener("input", applyColor4);

    }

    const applyColor1 = () => {
      color1.style.backgroundColor = colorForm1.value  // inputをいう動作を行った時、color_form1で選択された色を所得
      //console.log(colorForm1.value)  //colorForm1のメソッドを取得する
    }

    const applyColor2 = () => {
      color2.style.backgroundColor = colorForm2.value  // inputをいう動作を行った時、color_form2で選択された色を所得
      //console.log(colorForm2.value)  //colorForm2のメソッドを取得する
    }

    const applyColor3 = () => {
      color3.style.backgroundColor = colorForm3.value  // inputをいう動作を行った時、color_form3で選択された色を所得
      //console.log(colorForm3.value)  //colorForm3のメソッドを取得する
    }

    const applyColor4 = () => {
      color4.style.backgroundColor = colorForm4.value  // inputをいう動作を行った時、color_form4で選択された色を所得
      //console.log(colorForm4.value)  //colorForm4のメソッドを取得する
    }

    $(init);

  })
</script>

